#!/software/bin/perl -w

use strict;
use warnings;
use Carp;
use Tk;
use Tk::widgets qw/JPEG PNG/;
use Tk::Pane;
use FindBin;
use Data::Dumper;
use File::Spec;

my $opts = parse_params();
init($opts);
if ( exists($$opts{save_as}) )
{
    save_image($opts);
}
else
{
    run($opts);
}

exit;

#--------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg ) { confess @msg; }
    die
        "Usage: lookseq [OPTIONS] <file1.bam> <Title:file2.bam> chr:from-to\n",
        "Options:\n",
        "   -c, --config <dir>              Where to save temporary data (default is \$HOME/.lookseq).\n",
        "   -C, --chromosomes <regex>       The default is '[0-9XY]+' (1-22,X,Y), change to '.*' to match everything.\n",
        "   -i, --insert-size <int|Auto>    Default insert size.\n",
        "   -H, --image-height <int>        The main image height; used with -s.\n",
        "   -r, --reference <file.fa>       The reference fasta file.\n",
        "   -s, --save-as <file.png>        Do not run the GUI, just save the image\n",
        "   -v, --verbose                   Print lookseq commands executed.\n",
        "   -h, -?, --help                  This help message.\n",
        "\n";
}


sub parse_params
{
    my $opts = { config=>"$ENV{HOME}/.lookseq", verbose=>0, bams=>[] };
    $$opts{display_all_chrms} = 0;
    $$opts{chrms} = '[0-9XY]+';
    chomp($$opts{pwd}=`pwd`);

    my $reference;
    while (my $arg=shift(@ARGV))
    {
        if ( $arg eq '-C' || $arg eq '--chromosomes' ) { $$opts{chrms} = shift(@ARGV); next }
        if ( $arg eq '-c' || $arg eq '--config' ) { $$opts{config} = shift(@ARGV); next }
        if ( $arg eq '-r' || $arg eq '--reference' ) { $reference = shift(@ARGV); next }
        if ( $arg eq '-i' || $arg eq '--insert-size' ) { $$opts{cmdline}{insert_size}= shift(@ARGV); next }
        if ( $arg eq '-H' || $arg eq '--image-height' ) { $$opts{cmdline}{height}= shift(@ARGV); next }
        if ( $arg eq '-s' || $arg eq '--save-as' ) { $$opts{save_as} = shift(@ARGV); next }
        if ( $arg eq '-v' || $arg eq '--verbose' ) { $$opts{verbose} = 1; next }
        if ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        if ( -e $arg ) { push @{$$opts{bams}}, {file=>$arg,ref=>$reference}; next; }
        if ( $arg=~/^([^:]+):(.+)$/ && -e $2 ) { push @{$$opts{bams}}, {file=>$2,title=>$2,ref=>$reference}; next; }
        if ( $arg=~/^([^:]+):(\d+)-(\d+)$/ ) { $$opts{cmdline}{chr}=$1; $$opts{cmdline}{from}=$2; $$opts{cmdline}{to}=$3; next; }
        error("Unknown parameter or non-existent file \"$arg\". Run -h for help.\n");
    }
    $$opts{last_state} = "$$opts{config}/last_state";
    $$opts{settings} = "$$opts{config}/settings.pm";

    $$opts{get_data} = "$FindBin::RealBin/../cgi-bin/get_data.pl";
    if ( ! -e $$opts{get_data} ) { error("FIXME: could not find the get_data.pl binary (tried $$opts{get_data})\n"); }
    $$opts{get_data} = "perl -T -I $$opts{config} $$opts{get_data}";

    $$opts{chrom_stats} = "$FindBin::RealBin/../cgi-bin/chromosome_stats.pl";
    if ( ! -e $$opts{chrom_stats} ) { error("FIXME: could not find the chromosome_stats.pl binary (tried $$opts{chrom_stats})\n"); }
    $$opts{chrom_stats} = "perl -T -I $$opts{config} $$opts{chrom_stats}";

    if ( defined $reference && !-e $reference ) { error("No such file: $reference\n"); }

    for my $bam (@{$$opts{bams}})
    {
        if ( ! defined $$bam{ref} ) { error("No reference for $$bam{file}?\n"); }
        if ( !$$bam{ref} ) { $$bam{ref}=$reference; }
        if ( ! -e $$bam{ref} ) { error("No such file: $$bam{ref}\n"); }
    }

    return $opts;
}


sub CMD
{
    my ($cmd,$opts) = @_;
    if ( !$opts ) { $opts={}; }
    print STDERR "$cmd\n" unless !$$opts{verbose};
    my (@out) = `$cmd`;
    if ( $? )
    {
        print STDERR "$?: $!";
    }
    if ( scalar @out ) { return \@out; }
    return undef;
}

sub symlink_binary
{
    my ($dir,$bin) = @_;
    if ( -e "$dir/$bin" ) { return; }

    my $which = CMD("which $bin");
    if ( !$which ) { error("samtools not in the path?\n"); }

    chomp($$which[0]);
    symlink($$which[0], "$dir/$bin");
}

sub symlink_indexed
{
    my ($src,$dst,$idx) = @_;

    if ( ! -e $src ) { error("No such file: $src\n"); }
    if ( ! -e "$src$idx" ) { error("No such file: $src$idx\n"); }

    if ( -e $dst || -l $dst )
    {
        if ( !-l $dst ) { error("Not removing $dst, not a symlink.\n"); return; }
        unlink($dst);
    }
    if ( -e "$dst$idx" || -l "$dst$idx" )
    {
        if ( !-l "$dst$idx" ) { error("Not removing $dst$idx, not a symlink.\n"); return; }
        unlink("$dst$idx");
    }

    $src = File::Spec->rel2abs($src);

    symlink($src,$dst);
    if ( -e "$src$idx" ) { symlink("$src$idx","$dst$idx"); }
}

sub set_symlinks
{
    my ($opts) = @_;
    if ( !@{$$opts{files}} ) { error("No files given?\n"); }
    if ( $$opts{current_file}>=@{$$opts{files}} ) { $$opts{current_file}=0; }
    my $idx = $$opts{current_file};
    symlink_indexed($$opts{files}[$idx]{ref},"$$opts{config}/reference.fa",'.fai');
    symlink_indexed($$opts{files}[$idx]{file},"$$opts{config}/file.bam",'.bai');
}

sub set_titles
{
    my ($opts) = @_;
    $$opts{titles} = {};
    for my $file (@{$$opts{files}})
    {
        my $title;
        if ( exists($$file{title}) ) { $title = $$file{title}; } 
        elsif ( $$file{file}=~m{([^/]+)(?:\.bam)$}i ) { $title=$1; $$file{title}=$title; }
        else { error("FIXME: $$file{file}\n"); }
        if ( exists($$opts{titles}{$title}) ) { error(qq[The BAM title "$title" not unique ($$file{file})\n]); }
        $$opts{titles}{$title} = 1;
    }
}

sub init
{
    my ($opts) = @_;
    if ( !-e $$opts{config} ) { CMD("mkdir -p $$opts{config}"); }

    symlink_binary($$opts{config}, 'samtools');

    open(my $fh,'>',$$opts{settings}) or error("$$opts{settings}: $!"); 
    print $fh q[
# Do not edit this file, it will be overwritten. Edit the settings.pm-template instead.
package settings;

use Exporter 'import';
our @EXPORT = qw(
    $execpath $datapath $genome_file $reference_fa $webroot $docroot $htmlpath $tooltitle
    $cgi_path $annotation_file $snp_file $robots_flag $use_db_index_cutoff $uniqueness_file
    $use_sanger_cache $use_sanger_layout $sanger_header $css_file
    $use_mysql $mysql_server $mysql_port $mysql_user $mysql_password @mysql_dbs
    $max_window %lscolor $ls_max_lines $bam_ftp $reference_ftp $ensembl_http $render_image_command
);

our %lscolor;
$lscolor{'black'} = [ 0x00 , 0x00 , 0x00 ] ;
$lscolor{'white'} = [ 0xFF , 0xFF , 0xFF ] ;
$lscolor{'ltblue'} = [ 0x44 , 0xB4 , 0xD5 ] ;
$lscolor{'green'} = [ 0x00 , 0xFF , 0x00 ] ;
$lscolor{'green2'} = [ 0x00 , 0x80 , 0x00 ] ;
$lscolor{'ltgreen'} = [ 0x72 , 0xFE , 0x95 ] ;
$lscolor{'yellow'} = [ 0xED , 0xEF , 0x85 ] ;
$lscolor{'ltgrey'} = [ 0xDC , 0xDC , 0xDC ] ;
$lscolor{'grey'} = [ 0xC8 , 0xC8 , 0xC8 ] ;
$lscolor{'cyan'} = [ 0x44 , 0xB4 , 0xD5 ] ; # Cigar

$lscolor{'blue'}         = [0x45, 0x77, 0xa5];    # matching
$lscolor{'red'}          = [0xc3, 0x00, 0x1d];    # SNPs
$lscolor{'black'}        = [0x2f, 0x4f, 0x4f];    # reference
$lscolor{'green2'}       = [0x87, 0xa0, 0x4d];    # single pair
$lscolor{'brown'}        = [0x84, 0x6d, 0x53] ;   # Inversion
$lscolor{'mapqual_zero'} = [0xff, 0x72, 0x00] ;   # mapping quality zero

our $genome_file  = 'reference.fa';
our $reference_fa = 'reference.fa';
];
    print $fh q[our $execpath = '].$$opts{config}.qq[';\n];
    print $fh q[our $datapath = '].$$opts{config}.qq[';\n];
    our $reference_fa = 'reference.fa';
    close($fh);

    read_state($opts);
    set_symlinks($opts);
    set_titles($opts);
}

sub read_state
{
    my ($opts) = @_;

    my $saved_opts;
    if ( -e $$opts{last_state} ) 
    { 
        $saved_opts = do $$opts{last_state}; 
    }
    else
    {
        $saved_opts = 
        {
            insert_size => 'Auto',
            width => 700,
            min_width => 700,
            view_mode => 'pileup',
            chr => 1,
            from => 5783647,
            zoom => '1:1',
            mapq => 0,
            files => $$opts{bams},
            current_file => 0,
            win_border => 35,
            width_slack => 50,
            pwd => $$opts{pwd},
        };
    }
    $$opts{watch_vars} = [ qw(width) ];
    $$opts{save_vars}  = [ @{$$opts{watch_vars}}, qw(from to current_file insert_size view_mode chr from zoom mapq min_width win_border width_slack files pwd) ];
    for my $key (@{$$opts{save_vars}})
    {
        if ( exists($$saved_opts{$key}) && defined $$saved_opts{$key} ) { $$opts{$key} = $$saved_opts{$key}; }
        if ( exists($$opts{cmdline}{$key}) ) { $$opts{$key} = $$opts{cmdline}{$key}; }
    }
    if ( scalar @{$$opts{bams}} ) { $$opts{files}=$$opts{bams}; }
    chdir($$opts{pwd});
}

sub save_state
{
    my ($opts) = @_;
    my $to_save = {};
    for my $key (@{$$opts{save_vars}})
    {
        $$to_save{$key} = $$opts{$key};
    }
    open(my $fh,'>',$$opts{last_state}) or error("$$opts{last_state}: $!");
    print $fh Dumper($to_save);
    close $fh;
}

sub strip_http_header
{
    my ($data) = @_;
    while ( !($$data[0]=~/^\s*$/) ) { shift @$data; }
    shift @$data;
}

sub get_chr_list
{
    my ($opts) = @_;
    my $out = CMD($$opts{chrom_stats},$opts);
    if ( !$out ) { return; }
    strip_http_header($out);
    my @list;
    for my $chr (@$out)
    {
        if ( $chr=~/^($$opts{chrms})\s+/i ) { push @list, $1; }
    }
    if ( !scalar @list ) 
    { 
        error("No chromosomes matched '$$opts{chrms}', try different regex with the -C option.\n"); 
    }
    return \@list;
}


sub update_to_range
{
    my ($opts) = @_;

    my $to;
    if ( $$opts{zoom}=~/^(\d+):(\d+)$/ )
    {
        $to = $$opts{from}+int($$opts{width}*$1/7/$2);
    }
    elsif ( $$opts{zoom}=~/^(\d+)([kM]?)b?$/ ) 
    {
        if ( $2 )
        {
            if ( $2 eq 'k' ) { $to = $$opts{from}+$1*1000; }
            elsif ( $2 eq 'M' ) { $to = $$opts{from}+$1*1000000; }
        }
        else
        {
            $to = $$opts{from}+$1;
        }
    }
    $$opts{to} = $to;
}

sub run
{
    my ($opts) = @_;

    update_to_range($opts);
    $$opts{tk_position} = int(($$opts{from}+$$opts{to})*0.5);

    my $mw = MainWindow->new;
    $mw->focusFollowsMouse;

    my $toolbar = $mw->Frame();
    $$opts{tk_window}  = $mw;
    $$opts{tk_toolbar} = $toolbar->pack(-side=>'top');

    $mw->bind("<Control-q>" => \&exit);
    $toolbar->bind("<Key-Return>" => [\&force_refresh,$opts]);

    my %optionmenu_args = ( -borderwidth=>1, -padx=>3, -pady=>0, -relief=>'flat');
    my %entry_args = ( -borderwidth=>1, -relief=>'flat', -highlightbackground=>'#a3a3a3', -takefocus=>0, -insertofftime=>0);
    my %button_args = ( -borderwidth=>1, -relief=>'flat', -highlightbackground=>'#a3a3a3', -padx=>1, -pady=>1 );
    my %label_args = ( );

    if ( @{$$opts{files}}>1 )
    {
        $toolbar->Label(-text=>'   File:')->pack(-side=>'left');
        my $titles = [ sort keys %{$$opts{titles}} ];
        $$opts{current_file_title} = $$opts{files}[$$opts{current_file}]{title};
        my $chr_menu = $toolbar->Optionmenu(-options => $titles, -command=>[\&set_current_file,$opts], %optionmenu_args, -textvariable=>\$$opts{current_file_title})->pack(-side=>'left');
    }

    $toolbar->Label(-text=>'   View:')->pack(-side=>'left');
    $toolbar->Optionmenu(-options=>[qw(pileup reads)], -command=>[\&view_mode,$opts], %optionmenu_args, -textvariable=>\$$opts{view_mode})->pack(-side=>'left');
    $toolbar->Label(-text=>'   Chr:', %label_args)->pack(-side=>'left');

    my $chr_list = get_chr_list($opts);
    my $chr_menu = $toolbar->Optionmenu(-options => $chr_list, -command=>[\&set_chromosome,$opts], %optionmenu_args, -textvariable=>\$$opts{chr})->pack(-side=>'left');

    # Break the menu into columns - the list of the chromosomes can be very big with the -a option
    my $menu = $chr_menu->cget(-menu);
    for my $i (0 .. scalar @$chr_list) { $menu->entryconfigure($i, -columnbreak => 1) unless $i % 30; } 

    $toolbar->Label(-text=>'   Pos from:')->pack(-side=>'left');
    $$opts{tk_position_from} = $toolbar->Entry(-width=>10, %entry_args, -text=>$$opts{from})->pack(-side=>'left');
    $toolbar->Label(-text=>'   Zoom:', %label_args)->pack(-side=>'left');
    $$opts{tk_zoom} = $toolbar->Entry(-width=>6, %entry_args, -text=>$$opts{zoom})->pack(-side=>'left');
    $toolbar->Label(-text=>'   Insert size:', %label_args)->pack(-side=>'left');
    $$opts{tk_insert_size} = $toolbar->Entry(-width=>6, %entry_args, -text=>$$opts{insert_size})->pack(-side=>'left');
    $toolbar->Label(-text=>'   MapQ cutoff:', %label_args)->pack(-side=>'left');
    $$opts{tk_mapq} = $toolbar->Entry(-width=>3, %entry_args, -text=>$$opts{mapq})->pack(-side=>'left');

    $toolbar->Button(-text=>'Refresh' ,-command=>[\&force_refresh,$opts], %button_args)->pack(-side=>'right');
    $toolbar->Label(-textvariable=>\$$opts{tk_position})->pack(-side=>'right');

    $mw->bind('<Configure>' => [\&configure,$opts]);
    $$opts{refresh_timer} = $mw->repeat(500,[\&refresh,$opts]);

    refresh($opts);
    MainLoop;
}

sub get_size
{
    my ($w) = @_;
    my $geom = $w->geometry();
    if ( !($geom=~/^(\d+)x(\d+)\+\d+\+\d+$/) ) { error("FIXME: could parse $geom\n"); }
    return ($1,$2);
}

sub configure
{
    my ($widget,$opts) = @_;

    my ($win_w,$win_h) = get_size($$opts{tk_window});
    my ($fr_w,$fr_h)   = get_size($$opts{tk_frame});
    my ($tb_w,$tb_h)   = get_size($$opts{tk_toolbar});
    my $diff_w = $win_w - $fr_w;
    my $diff_h = $win_h - $fr_h - $tb_h;

    if ( $win_w-$$opts{width}>$$opts{width_slack} && $win_w>=$$opts{min_width} ) 
    { 
        $$opts{width}=$win_w-$$opts{win_border}; 
    }
}

sub force_refresh
{
    my ($opts) = @_;
    $$opts{force_refresh} = 1;
}

sub refresh
{
    my ($opts) = @_;

    if ( $$opts{tk_zoom} )
    {
        $$opts{zoom} = $$opts{tk_zoom}->get();
    }
    update_to_range($opts);

    if ( $$opts{tk_insert_size} )
    {
        $$opts{insert_size} = $$opts{tk_insert_size}->get();
    }

    if ( $$opts{tk_mapq} )
    {
        $$opts{mapq} = $$opts{tk_mapq}->get();
    }

    if ( $$opts{tk_position_from} )
    {
        my $from = $$opts{tk_position_from}->get();
        if ( $from && $$opts{from} ne $from ) 
        { 
            $$opts{to}  += $from-$$opts{from};
            $$opts{from} = $from;
        }
    }
    
    main_image($opts);
}

sub main_image
{
    my ($opts) = @_;

    my $needs_refresh = $$opts{force_refresh};
    for my $var (@{$$opts{watch_vars}})
    {
        if ( !exists($$opts{prev_values}{$var}) or $$opts{prev_values}{$var} ne $$opts{$var} ) { $needs_refresh=1; }
        $$opts{prev_values}{$var} = $$opts{$var};
    }
    $$opts{force_refresh} = 0;
    if ( !$needs_refresh ) { return; }

    $$opts{tk_window}->Busy(-recurse=>1);
    save_state($opts);

    my $chr  = $$opts{chr};
    my $from = $$opts{from};
    my $to   = $$opts{to};

    # Do the main image
    my $mapq = $$opts{mapq} ? "mapq=$$opts{mapq}" : '';
    my $view = $$opts{view_mode} eq 'pileup' ? 'paired_pileup' : 'indel';
    my $args = qq[output=image width=$$opts{width} view=$view maxdist=$$opts{insert_size} display='|perfect|single|inversions|pairlinks|potsnps|uniqueness|gc|coverage|' debug=0 lane=file.bam $mapq];
    my $out = CMD("$$opts{get_data} $args from=$from to=$to chr=$chr",$opts);
    if ( !$out ) { return; }
    strip_http_header($out);
    open(my $fh,'>',"$$opts{config}/img.png") or error("$$opts{config}/img.png: $!"); 
    print $fh join('',@$out);
    close($fh);

    $out = CMD("identify -format '%w %h' $$opts{config}/img.png",$opts);
    if ( !($$out[0]=~/^(\d+) (\d+)$/) ) { error("Uh: identify -format '%w %h' $$opts{config}/img.png .. [$$out[0]]\n"); }
    my $width       = $1;
    my $main_height = $2;


    # Do the depth image
    $args = qq[output=image width=$$opts{width} view=coverage maxdist=$$opts{insert_size} display='|perfect|single|inversions|pairlinks|potsnps|uniqueness|gc|coverage|' debug=0 lane=file.bam $mapq];
    $out = CMD("$$opts{get_data} $args from=$from to=$to chr=$chr",$opts);
    if ( !$out ) { return; }
    strip_http_header($out);
    open($fh,'>',"$$opts{config}/depth.png") or error("$$opts{config}/depth.png: $!"); 
    print $fh join('',@$out);
    close($fh);

    $out = CMD("identify -format '%w %h' $$opts{config}/depth.png",$opts);
    if ( !($$out[0]=~/^(\d+) (\d+)$/) ) { error("Uh: identify -format '%w %h' $$opts{config}/img.png .. [$$out[0]]\n"); }
    my $depth_height = $2;

    my $height = $main_height + $depth_height;
    my $new_canvas = 0;

    if ( exists($$opts{tk_frame}) && ($height!=$$opts{prev_height} or $width!=$$opts{prev_width}) )
    {
        $$opts{tk_canvas}->destroy();
        $$opts{tk_frame}->configure(-width=>$width,-height=>$height);
        delete($$opts{tk_canvas});
        $$opts{tk_canvas} = $$opts{tk_frame}->Canvas(-width=>$width,-height=>$height)->pack(-expand=>1,-fill=>'both');
        $new_canvas = 1;
    }
    if ( !exists($$opts{tk_frame}) )
    {
        $$opts{tk_photo_main}  = $$opts{tk_window}->Photo('main',-file=>"$$opts{config}/img.png",-format=>'PNG');
        $$opts{tk_photo_depth} = $$opts{tk_window}->Photo('depth',-file=>"$$opts{config}/depth.png",-format=>'PNG');

        $$opts{tk_frame}  = $$opts{tk_window}->Scrolled('Frame',-scrollbars=>'se',-width=>$width,-height=>$height)->pack(-side=>'bottom',-expand=>1,-fill=>'both');
        $$opts{tk_canvas} = $$opts{tk_frame}->Canvas(-width=>$width,-height=>$height)->pack(-expand=>1,-fill=>'both');
        $$opts{tk_img_main}  = $$opts{tk_canvas}->createImage(1,1,-image=>'main',-anchor=>'nw');
        $$opts{tk_img_depth} = $$opts{tk_canvas}->createImage(1,$main_height,-image=>'depth',-anchor=>'nw');
        $new_canvas = 1;

        $$opts{width}  = $width;
        $$opts{height} = $height;
    }
    else
    {
        $$opts{tk_photo_main}->destroy;
        $$opts{tk_photo_depth}->destroy;

        $$opts{tk_photo_main}  = $$opts{tk_window}->Photo('main',-file=>"$$opts{config}/img.png",-format=>'PNG');
        $$opts{tk_photo_depth} = $$opts{tk_window}->Photo('depth',-file=>"$$opts{config}/depth.png",-format=>'PNG');
        $$opts{tk_img_main}  = $$opts{tk_canvas}->createImage(1,1,-image=>'main',-anchor=>'nw');
        $$opts{tk_img_depth} = $$opts{tk_canvas}->createImage(1,$main_height,-image=>'depth',-anchor=>'nw');
        $$opts{tk_canvas}->raise('position_line');
    }
    $$opts{prev_width}  = $width;
    $$opts{prev_height} = $height;

    if ( $new_canvas )
    {
        $$opts{tk_canvas}->bindtags(undef);
        $$opts{tk_canvas}->createLine($width/2,0,$width/2,$height,-fill=>'red',-tag=>'position_line',-dash=>[2,2]);
        $$opts{tk_canvas}->CanvasBind('<ButtonRelease-1>' => [\&set_position, $opts]);
        $$opts{tk_canvas}->CanvasBind('<Motion>' => [\&set_position, $opts]);
        $$opts{tk_canvas}->CanvasBind('<Double-Button-1>' => [\&move_to_position, $opts]);
        $$opts{tk_canvas}->CanvasBind("<Key-Left>" => [\&move_left,$opts]);
        $$opts{tk_canvas}->CanvasBind("<Key-Right>" => [\&move_right,$opts]);
        $$opts{tk_canvas}->CanvasBind("<Control-c>" => [\&position_to_clipboard,$opts]);
        $$opts{tk_canvas}->CanvasBind("<Control-g>" => [\&go_to_position,$opts]);
    }


    update_position_entry($opts);
    $$opts{tk_window}->Unbusy(-recurse=>1);
}


sub save_image
{
    my ($opts) = @_;

    if ( !exists($$opts{cmdline}{chr}) or !exists($$opts{cmdline}{from}) or !exists($$opts{cmdline}{to}) ) { error("Missing region\n"); } 
    my $chr  = $$opts{cmdline}{chr};
    my $from = $$opts{cmdline}{from};
    my $to   = $$opts{cmdline}{to};

    # Do the main image
    my $mapq = $$opts{mapq} ? "mapq=$$opts{mapq}" : '';
    my $view = $$opts{view_mode} eq 'pileup' ? 'paired_pileup' : 'indel';
    my $height = $$opts{cmdline}{height} ? "height=$$opts{cmdline}{height}" : '';
    my $args = qq[output=image width=$$opts{width} $height view=$view maxdist=$$opts{insert_size} display='|perfect|single|inversions|pairlinks|potsnps|uniqueness|gc|coverage|' debug=0 lane=file.bam $mapq];
    my $out = CMD("$$opts{get_data} $args from=$from to=$to chr=$chr",$opts);
    if ( !$out ) { return; }
    strip_http_header($out);
    open(my $fh,'>',"$$opts{save_as}.main.png") or error("$$opts{save_as}.main.png: $!"); 
    print $fh join('',@$out);
    close($fh);

    # Do the depth image
    $args = qq[output=image width=$$opts{width} view=coverage maxdist=$$opts{insert_size} display='|perfect|single|inversions|pairlinks|potsnps|uniqueness|gc|coverage|' debug=0 lane=file.bam $mapq];
    $out = CMD("$$opts{get_data} $args from=$from to=$to chr=$chr",$opts);
    if ( !$out ) { return; }
    strip_http_header($out);
    open($fh,'>',"$$opts{save_as}.dp.png") or error("$$opts{save_as}.dp.png: $!"); 
    print $fh join('',@$out);
    close($fh);

    # The 2>/dev/null is because of
    #   montage: unable to read font `/software/solexa/lib/ImageMagick-6.3.7/config//usr/share/ghostscript/fonts/n019003l.pfb'.
    CMD("convert -append $$opts{save_as}.main.png $$opts{save_as}.dp.png $$opts{save_as} 2>/dev/null");
    unlink("$$opts{save_as}.main.png");
    unlink("$$opts{save_as}.dp.png");
}



# Handlers...

sub view_mode
{
    my ($opts,$mode) = @_;
    if ( !$$opts{view_mode} || $$opts{view_mode} ne $mode )
    {
        $$opts{view_mode} = $mode;
        refresh($opts);
    }
    $$opts{view_mode} = $mode;
    $$opts{force_refresh} = 1;
}

sub move_left
{
    my (@args) = @_;
    my $opts = $args[-1];
    my $delta = int(($$opts{to} - $$opts{from})/3);
    $$opts{from} -= $delta;
    $$opts{to}   -= $delta;
    $$opts{force_refresh} = 1;
    update_position_entry($opts);
    return 0;
}
sub move_right
{
    my (@args) = @_;
    my $opts = $args[-1];
    my $delta = int(($$opts{to} - $$opts{from})/3);
    $$opts{from} += $delta;
    $$opts{to}   += $delta;
    $$opts{force_refresh} = 1;
    update_position_entry($opts);
    return 0;
}

sub set_position
{
    my ($widget,$opts) = @_;

    my $e = $widget->XEvent;
    my($X, $Y, $x, $y) = ($e->X, $e->Y, $e->x, $e->y);

    my ($lx,$ly) = $$opts{tk_canvas}->coords('position_line');
    $$opts{tk_canvas}->move('position_line',$x-$lx,0);
    $$opts{tk_position} = int($x*($$opts{to}-$$opts{from}+1)/$$opts{width}) + $$opts{from};
}

sub move_to_position
{
    my ($widget,$opts) = @_;

    my $e = $widget->XEvent;
    my($X, $Y, $x, $y) = ($e->X, $e->Y, $e->x, $e->y);

    my $new_midpoint = int($x*($$opts{to}-$$opts{from}+1)/$$opts{width});
    my $delta = $new_midpoint - int(0.5*($$opts{to}-$$opts{from}));

    $$opts{from} += $delta;
    $$opts{to}   += $delta;

    $$opts{force_refresh} = 1;
}

sub position_to_clipboard
{
    my ($widget,$opts) = @_;
    $$opts{clipboard} = $$opts{tk_position};
    $$opts{tk_window}->SelectionClear;
    $$opts{tk_window}->SelectionHandle( sub {return $$opts{clipboard}} );
    $$opts{tk_window}->SelectionOwn;
}

sub run_test
{
    my ($widget,$opts) = @_;
    $$opts{force_refresh} = 1;
}

sub go_to_position
{
    my ($widget,$opts) = @_;
    my $from = $$opts{tk_window}->SelectionGet();
    if ( !defined $from ) { return; }
    if ( $from=~/^\d+$/ )
    {
        $$opts{to}  += $from-$$opts{from};
        $$opts{from} = $from;
        update_position_entry($opts);
        $$opts{force_refresh} = 1;
    }
    elsif ( $from=~/^([^:]+):(\d+)$/ )
    {
        $from = $2;
        set_chromosome($opts,$1);
        $$opts{to}  += $from-$$opts{from};
        $$opts{from} = $from;
        update_position_entry($opts);
        $$opts{force_refresh} = 1;
    }
}

sub update_position_entry
{
    my ($opts) = @_;
    if ( $$opts{tk_position_from} )
    {
        $$opts{tk_position_from}->delete(0,'end');
        $$opts{tk_position_from}->insert(0, $$opts{from});
    }
}

sub set_chromosome
{
    my ($opts,$chr) = @_;
    $$opts{chr} = $chr;
}

sub set_current_file
{
    my ($opts,$title) = @_;
    for (my $i=0; $i<@{$$opts{files}}; $i++)
    {
        my $file = $$opts{files}[$i];
        if ( $$file{title} ne $title ) { next; }
        $$opts{current_file} = $i;
        set_symlinks($opts);
        last;
    }
    $$opts{current_file_title} = $title;
    $$opts{force_refresh} = 1;
}



